#!/usr/bin/env python3
"""
Setup-Skript f√ºr den Immobilien-Bewerbungsbot
Automatische Installation und Konfiguration

Autor: Manus AI Assistant
Datum: 2025-07-03
"""

import os
import sys
import subprocess
import yaml
from pathlib import Path


def check_python_version():
    """Pr√ºft die Python-Version"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 oder h√∂her ist erforderlich!")
        print(f"Aktuelle Version: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python-Version: {sys.version}")


def install_requirements():
    """Installiert die erforderlichen Python-Pakete"""
    print("\nüì¶ Installiere erforderliche Pakete...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Alle Pakete erfolgreich installiert!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Fehler beim Installieren der Pakete: {e}")
        sys.exit(1)


def check_chrome_driver():
    """Pr√ºft, ob ChromeDriver verf√ºgbar ist"""
    print("\nüåê Pr√ºfe ChromeDriver...")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.quit()
        print("‚úÖ ChromeDriver ist verf√ºgbar!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è ChromeDriver-Problem: {e}")
        print("\nüí° L√∂sungsvorschl√§ge:")
        print("1. Installieren Sie Google Chrome")
        print("2. Installieren Sie ChromeDriver:")
        print("   - Ubuntu/Debian: sudo apt-get install chromium-chromedriver")
        print("   - macOS: brew install chromedriver")
        print("   - Windows: Laden Sie ChromeDriver von https://chromedriver.chromium.org/ herunter")


def create_directories():
    """Erstellt erforderliche Verzeichnisse"""
    print("\nüìÅ Erstelle Verzeichnisse...")
    
    directories = [
        "logs",
        "templates",
        "backups",
        "data"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Verzeichnis erstellt: {directory}")


def setup_config():
    """Hilft beim Einrichten der Konfiguration"""
    print("\n‚öôÔ∏è Konfiguration einrichten...")
    
    config_file = "config.yaml"
    
    if os.path.exists(config_file):
        response = input(f"Konfigurationsdatei {config_file} existiert bereits. √úberschreiben? (j/N): ")
        if response.lower() != 'j':
            print("Konfiguration beibehalten.")
            return
    
    print("\nBitte geben Sie Ihre Daten ein:")
    
    # Pers√∂nliche Daten abfragen
    print("\nüë§ Pers√∂nliche Daten:")
    anrede = input("Anrede (Herr/Frau/Divers) [Herr]: ") or "Herr"
    vorname = input("Vorname: ")
    nachname = input("Nachname: ")
    email = input("E-Mail-Adresse: ")
    telefon = input("Telefonnummer (optional): ")
    strasse = input("Stra√üe und Hausnummer: ")
    plz = input("Postleitzahl: ")
    ort = input("Ort: ")
    
    # Suchkriterien abfragen
    print("\nüîç Suchkriterien:")
    max_preis = float(input("Maximaler Mietpreis in Euro [1500]: ") or "1500")
    min_zimmer = int(input("Mindestanzahl Zimmer [2]: ") or "2")
    max_zimmer = int(input("Maximale Anzahl Zimmer [4]: ") or "4")
    
    suchstaedte = []
    print("Suchst√§dte (Enter f√ºr Ende):")
    while True:
        stadt = input("Stadt: ")
        if not stadt:
            break
        suchstaedte.append(stadt)
    
    if not suchstaedte:
        suchstaedte = ["Berlin"]
    
    # E-Mail-Konfiguration
    print("\nüìß E-Mail-Konfiguration (f√ºr Benachrichtigungen):")
    smtp_username = input("E-Mail-Adresse f√ºr Benachrichtigungen (optional): ")
    smtp_password = ""
    if smtp_username:
        smtp_password = input("App-Passwort (nicht das normale Passwort!): ")
    
    # Bewerbungstext
    print("\n‚úçÔ∏è Bewerbungstext:")
    print("Geben Sie Ihren Standard-Bewerbungstext ein (Enter f√ºr Standard-Text):")
    bewerbungstext = input() or f"""Sehr geehrte Damen und Herren,

hiermit bewerbe ich mich um die ausgeschriebene Wohnung. Ich bin ein zuverl√§ssiger Mieter mit festem Einkommen und kann alle erforderlichen Unterlagen vorlegen.

√úber eine positive R√ºckmeldung w√ºrde ich mich sehr freuen.

Mit freundlichen Gr√º√üen
{vorname} {nachname}"""
    
    # Konfiguration erstellen
    config = {
        'personal': {
            'anrede': anrede,
            'vorname': vorname,
            'nachname': nachname,
            'email': email,
            'telefon': telefon,
            'strasse': strasse,
            'plz': plz,
            'ort': ort
        },
        'bewerbungstext': bewerbungstext,
        'suchkriterien': {
            'max_preis': max_preis,
            'min_zimmer': min_zimmer,
            'max_zimmer': max_zimmer,
            'suchstaedte': suchstaedte
        },
        'email': {
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587,
            'smtp_username': smtp_username,
            'smtp_password': smtp_password,
            'benachrichtigungen': {
                'email_bei_neuen_angeboten': True,
                'email_bei_fehlern': True,
                'tages_zusammenfassung': True,
                'wochen_zusammenfassung': False,
                'min_angebote_fuer_email': 1,
                'max_emails_pro_tag': 10
            }
        },
        'bot': {
            'intervall_minuten': 30,
            'max_bewerbungen_pro_tag': 20,
            'pause_zwischen_bewerbungen': {
                'min': 30,
                'max': 60
            },
            'anti_detection': {
                'random_user_agents': True,
                'random_delays': True,
                'headless_browser': True
            },
            'aktive_websites': {
                'immonet': True,
                'immobilienscout24': False
            }
        },
        'database': {
            'pfad': 'immobilien_bot.db',
            'backup_intervall_tage': 7
        },
        'logging': {
            'level': 'INFO',
            'datei': 'immobilien_bot.log',
            'max_groesse_mb': 10,
            'backup_anzahl': 5
        }
    }
    
    # Konfiguration speichern
    with open(config_file, 'w', encoding='utf-8') as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
    
    print(f"‚úÖ Konfiguration gespeichert in {config_file}")


def create_start_script():
    """Erstellt ein Start-Skript"""
    print("\nüöÄ Erstelle Start-Skript...")
    
    start_script = """#!/bin/bash
# Immobilien-Bot Starter

echo "üè† Starte Immobilien-Bewerbungsbot..."

# Pr√ºfe, ob Python verf√ºgbar ist
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 ist nicht installiert!"
    exit 1
fi

# Pr√ºfe, ob Konfiguration existiert
if [ ! -f "config.yaml" ]; then
    echo "‚ùå Konfigurationsdatei config.yaml nicht gefunden!"
    echo "F√ºhren Sie zuerst 'python3 setup.py' aus."
    exit 1
fi

# Bot starten
python3 immobilien_bot_main.py

echo "Bot beendet."
"""
    
    with open("start_bot.sh", "w") as f:
        f.write(start_script)
    
    # Ausf√ºhrbar machen
    os.chmod("start_bot.sh", 0o755)
    print("‚úÖ Start-Skript erstellt: start_bot.sh")


def show_next_steps():
    """Zeigt die n√§chsten Schritte an"""
    print("\n" + "="*60)
    print("üéâ SETUP ABGESCHLOSSEN!")
    print("="*60)
    print("\nüìã N√§chste Schritte:")
    print("1. Bearbeiten Sie config.yaml und tragen Sie Ihre echten Daten ein")
    print("2. F√ºr E-Mail-Benachrichtigungen:")
    print("   - Gmail: Aktivieren Sie 2FA und erstellen Sie ein App-Passwort")
    print("   - Andere: Passen Sie SMTP-Einstellungen in config.yaml an")
    print("3. Starten Sie den Bot:")
    print("   - Linux/macOS: ./start_bot.sh")
    print("   - Windows: python immobilien_bot_main.py")
    print("   - Oder: python3 immobilien_bot_main.py")
    print("\n‚ö†Ô∏è WICHTIGE HINWEISE:")
    print("- Verwenden Sie den Bot verantwortungsvoll")
    print("- Respektieren Sie die Nutzungsbedingungen der Websites")
    print("- Pr√ºfen Sie regelm√§√üig die Logs")
    print("- Der Bot l√§uft im Hintergrund - beenden Sie ihn mit Ctrl+C")
    print("\nüìö Weitere Informationen finden Sie in der README.md")
    print("="*60)


def main():
    """Hauptfunktion des Setup-Skripts"""
    print("üè† Immobilien-Bewerbungsbot Setup")
    print("="*40)
    
    # Pr√ºfungen
    check_python_version()
    
    # Installation
    install_requirements()
    check_chrome_driver()
    create_directories()
    
    # Konfiguration
    setup_config()
    create_start_script()
    
    # Abschluss
    show_next_steps()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup abgebrochen.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unerwarteter Fehler: {e}")
        sys.exit(1)

